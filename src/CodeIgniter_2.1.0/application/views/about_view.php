<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />

        <link href="/assets/css/Style.css" rel="stylesheet" type="text/css" />
        <link href="/assets/css/colorbox.css" rel="stylesheet" type="text/css"></link>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
        <script type="text/javascript" src="/assets/js/jquery.colorbox-min.js" ></script>
    </head>
    <body class="about">
        <div id="logo_about">
            
        </div>
        <pre id="about_info">
           
TЕХНОЛОГИЧЕСКО  УЧИЛИЩЕ
ЕЛЕКТРОННИ  СИСТЕМИ 
към  ТЕХНИЧЕСКИ  УНИВЕРСИТЕТ - СОФИЯ




Wherebg





Тема: “wherebg” – система за търсене и свързване на обекти от интернет, чрез използване на web API модули


Автори

-	Кристиян Сашов Иванов
-	Манол Велиславов Денев
Ръководител
-	Стоян Дамянов Францов


1- Цели (предназначение, кратък анализ на потребностите и на съществуващите 
решения) Функционални изисквания към 
Сайтът трябва да съдържа:

1)	Страници – основна и IFrame със сведения за заведението (обекта)		Основната (начална) страница на проекта трябва да съдържа карта на града, центрирана първоначално според мястото където се намира потребителят в момента. 
От там потребителят ще има възможност да избере мястото, което представлява интерес за него, посредством поставяне на маркер на картата. Приложението автоматично ще постави маркери, показващи най-близките заведения. 
При кликване върху маркер на заведение ще се отваря IFrame-ът с допълнителна информация. Около картата трябва да има полета представящи “топ заведения” и заведения с най-нисък рейтинг. Както и реклами на API-тата, които използваме.

IFrame-ът ще се отваря при натискане върху маркерът, посочващ даден обект. Той ще съдържа рейтинг на заведението, коментари за него групирани по източниците от които сме ги взели с линкове към сайта, от който сме взели информацията.

	
2)	Потребители  (два вида) – обикновен потребител и администратор

	Обикновеният потребител има достъп до цялата функционалност на сайта.
Тъй като приложението няма да изисква регистрация от ползващите го, всеки потребител ще може да го ползва без каквото и да е обвързване с него и ще може да се възползва от пълните възможности за намиране на най-близките обекти 
около дадена локация, преглеждане на рейтинг и коментари за заведението, както и даване на негова лична оценка.

	Администраторът има най-високи права:
		-Може да преглежда съдържанието на таблиците
Администраторът има достъп до таблиците през админ панелът. От там той може да ги редактира, до колкото това му позволява админ панелът.
		-При невъзможност да се оцени съдържанието автоматично, администраторът ще е отговорен за оценяването на информацията
Въпреки че идеята на приложението е да оценява, опреснява и намира информация самостоятелно, не може да изключим възможността за намиране на информация, която да не е възможно да се обработи автоматично. Например приложението няма как да разбира иронията и сарказма. 
		-Има възможност за блокиране на дадени резултати ако прецени, че нямат връзка със запитванията
Съществува възможност някое от използваните API-та, използвани за търсене, да връща резултати, които да нямат връзка с търсеното от приложението.
		-Получава нотификации за необходимите от него действия
При всяко свое влизане администраторът ще получава нотификации под формата на съобщения, които да го известяват къде неговата намеса е нужна. 
		-Притежава потребителско име и парола, за да може да бъде разграничен от обикновените потребители.
Задачата на администратора е да се грижи за информацията в случаите когато тя не може да бъде автоматично обработена. 


	3) Услуги : 
		3.1 – автоматично намиране на информация
Използвайки различни API-та (Google Web Search, FourSquare, Bing Search). Тъй като всички те връщат резултат от типа Json обработката е лесна и бърза.
3.2 – автоматично преценяване на връзката на информацията  
според конкретните критерии
Преглеждайки получените резултати те ще бъдат анализирани на база съдържание на определени ключови думи в тях.
3.3 – автоматично оценяване на намерената информация
Намиране на секцията с коментари и създаване на рейтинг на заведението въз основа на ключовите думи намерени в коментарите.
3.4 – предоставяне на сортираната информация на потребителя
Показване на вече изработеният рейтинг и сортираните по дата мнения на потребителя посредством IFrame-а.
3.5 – възможност за потребителя да оцени заведение
По този начин всеки ще може да оцени заведение, което е посетил, увеличавайки и опреснявайки по този начин данните ни за даденото заведение.
3.6 – автоматична проверка за обновяване на взетата информация
На всеки 4-5 дни при обновяване на информацията приложението ще трябва автоматично да провери дали има информация в дадените източници (форуми, сайтове, мнения във FourSquare, FaceBook и др.) след последната прочетена и записана в базата информация от определеният сайт. В случай на намиране на нова информация, тя ще бъде добавяна в базата от данни и рейтингът ще бъде преизчисляван на базата и на намерената нова информация. 
		3.7 – търсене на заведения по определен критерий(например по име)
Възможност за търсене по име на обекти, който или които ще бъдат показвани като маркери на потребителя на картата.

2. Основни етапи в реализирането на проекта (основни дейности, роли на авторите)
2.1 изграждане на външен вид – Манол Денев
2.2 изграждане на админ- панелът, предоставящ права на администраторът Кристиян Иванов
2.3 автоматично намиране на информация, използвайки различни API-та
	а - Foursquare API – Кристиян Иванов
	b - Twitter search API – Кристиян Иванов
	c- Google Custom Json/Atom API – Кристиян Иванов
	d - разработване на parser, който да извлича информация от намерените сайтове
2.4 автоматично преценяване на връзката на информацията  според конкретните критерии – Кристиян Иванов
2.5 оценяване на намерената иформация – Кристиян Иванов
2.6 предоставяне на сортираната информация на потребителя – Манол Денев (Google Maps JS Api v3)
2.7 търсене на заведения по определен критерий(например по име) – Кристиян Иванов (в администраторският панел) и Манол Денев (в потребителската част)
2.8 предоставяне на възможност потребителят да оставя коментари за заведението 
	a – Facebook Social API - Манол Денев
2.9 автоматизиране на обновяването на приложението – Кристиян Иванов

3. Ниво на сложност на проекта − основни проблеми при реализация на поставените 
Цели
Целта на „wherebg“ е да намира, оценява информация и да я предоставя на потребителят. За намирането на информация се разчита на няколко api-та. Именно в това се състояха основната част от проблемите. Различните api-та налагат различни ограничения при броя на заявките към тях, например foursquare api има лимит от 500 заявки, докато Google Custom Json/Atom API има едва 100. Също така този лимит не се нулира по едно и също време отново за пример могат да бъдат използвани foursquare api и Google Custom Json/Atom API, foursquare нулират направените заявки към тях на всеки час, докато google правят това на 24 часа. 
Друг проблем, е че foursquare нямат възможност за търсене на заведения, най-близкото е търсенето по координати. Поради това трябваше да бъдат намерени 4 координатни точки около софия, формиращи четирийгълник. Първият нячин за решаване на проблемът беше чрез цикъл, който обикаля от горният ляв край до долният десен край на този четириъгълник и прави заявки към foursquare с моментните си координати. Лимита на заявките към foursquare доведе до залагането на твърде голяма фиксирана стъпка в този цикъл. Това от своя страна доведе до два проблема – заведенията, бяха взимани на фиксирани радиуси и заради голямата стъпка много от тях бяха пропускани. Освен това фиксираните стъпка, начало и край означаваха, че всеки път ще намираме едни и същи заведения. Начинът, който използваме в момента решава тези проблеми. В текущото решение приложението генерира случайни координати, отново заключени между тези четири точки и прави запитване към foursquare api със случайно генерираните си координати. Така лимита на заявките се контролира по-лесно, а и вероятността да бъдат намирани отново и отново същите заведения е нищожна. Самият факт, че с този подход в течение на няколко обновявания биват записани 3-4 пъти повече заведения, от колкото с предишният е показателен.
Фактът че различните api-та нулират заявките към тях на различен период от време означа, че или ъпдейтите на проекта трябва да бъдат правени винаги с честотата на най-бавно нулираното api, или да бъде разделен на две части, което е и подхода който беше избран.
Освен всички лимити които употребата на api-та налага, те биват развивани постоянно, което често води до промени в начина на authentication, самата структура на заявките и дори самото им съществуване.
Google maps JS API v3 е основният модул, с който работи потребителят. За да бъдат съчетани функционалност и добър външен вид, трябваше да използваме широк набор от функциите, които ни предоставя модулът. Поради специфичността на api модула, се сблъскахме с някои малки проблеми.

        </pre>
    </body>
</html>